{
	"info": {
		"_postman_id": "24dc07d1-041d-4df1-9e51-1b746d05b799",
		"name": "breakfast-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Breakfast Items",
			"description": "Tests /api/breakfastitem endpoints.\nThis is meant to test a non-standard or concrete mongo service and repository.",
			"item": [
				{
					"name": "When attempting to create invalid breakfast item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca994d72-be01-41d7-be16-dab02986d29f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastItem",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "When attempting to create empty breakfast item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca994d72-be01-41d7-be16-dab02986d29f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/BreakfastItem",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "When creating bacon breakfast item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2c5186d-0031-4999-beeb-fd7f75394f00",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should have correct name\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"name\").that.is.equal(\"bacon\");",
									"});",
									"",
									"pm.test(\"response should have an id\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.not.empty;",
									"",
									"    // save id for next requests.",
									"    pm.environment.set(\"bacon_id\", jsonData.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"bacon\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastItem",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "When creating eggs breakfast item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d194643-4d36-43e7-8757-3c716f1c4c1a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should have correct name\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"name\").that.is.equal(\"eggs\");",
									"});",
									"",
									"pm.test(\"response should have an id\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.not.empty;",
									"",
									"    // save id for next requests.",
									"    pm.environment.set(\"eggs_id\", jsonData.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"eggs\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastItem",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "When attempting to create duplicate breakfast item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca994d72-be01-41d7-be16-dab02986d29f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"eggs\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastItem",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "When getting breakfast item by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1e27105-0ab9-41eb-8c03-92e913a78b89",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should have correct name\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"name\").that.is.equal(\"bacon\");",
									"});",
									"",
									"pm.test(\"response should have an id\", function () { ",
									"    var jsonData = pm.response.json();",
									"    var expected = pm.environment.get(\"bacon_id\");",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.equal(expected);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastItem/by-name/bacon",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem",
								"by-name",
								"bacon"
							]
						}
					},
					"response": []
				},
				{
					"name": "When getting breakfast item by case-insensitive name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1e27105-0ab9-41eb-8c03-92e913a78b89",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should have correct name\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"name\").that.is.equal(\"bacon\");",
									"});",
									"",
									"pm.test(\"response should have an id\", function () { ",
									"    var jsonData = pm.response.json();",
									"    var expected = pm.environment.get(\"bacon_id\");",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.equal(expected);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastItem/by-name/BACON",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem",
								"by-name",
								"BACON"
							]
						}
					},
					"response": []
				},
				{
					"name": "When getting breakfast item by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a14c192-31b3-478c-acd2-f971a812ac4f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should have correct name\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"name\").that.is.equal(\"eggs\");",
									"});",
									"",
									"pm.test(\"response should have an id\", function () { ",
									"    var jsonData = pm.response.json();",
									"    var expected = pm.environment.get(\"eggs_id\");",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.equal(expected);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastItem/{{eggs_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem",
								"{{eggs_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "When getting all breakfast items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ca59e7f-9927-40db-b033-e4d40be0614a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should be an array\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response should have correct number of items\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(2);",
									"});",
									"",
									"pm.test(\"response should have bacon\", function () { ",
									"    var jsonData = pm.response.json();",
									"    var expected = {",
									"        id: pm.environment.get(\"bacon_id\"),",
									"        name: \"bacon\"",
									"    };",
									"    pm.expect(jsonData).to.deep.include(expected);",
									"});",
									"",
									"pm.test(\"response should have eggs\", function () { ",
									"    var jsonData = pm.response.json();",
									"    var expected = {",
									"        id: pm.environment.get(\"eggs_id\"),",
									"        name: \"eggs\"",
									"    };",
									"    pm.expect(jsonData).to.deep.include(expected);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastItem",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "When deleting bacon breakfast item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fab5de72-aa6a-4867-9ef8-c1670ca08912",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastItem/{{bacon_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem",
								"{{bacon_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "When deleting eggs breakfast item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fab5de72-aa6a-4867-9ef8-c1670ca08912",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastItem/{{eggs_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem",
								"{{eggs_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "When attempting to get deleted breakfast item by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32652026-fcd7-4ad7-969b-788d8cd421ef",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastItem/{{bacon_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem",
								"{{bacon_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "When attempting to get deleted breakfast item by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32652026-fcd7-4ad7-969b-788d8cd421ef",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastItem/by-name/bacon",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastItem",
								"by-name",
								"bacon"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "04dd2b01-718d-4e8a-a87f-63d8ef9d5b1a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "49eec6c0-49b4-4175-bee5-a2d1df7ad818",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Breakfast Orders",
			"description": "Tests /api/breakfastorder endpoints.\nThis is meant to test a mongo repository setup for auto-expire.",
			"item": [
				{
					"name": "When attempting to create breakfast order with duplicate items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc599474-c026-4938-a694-0954ed565415",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"breakfastItems\": [\"bacon\", \"bacon\"]\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastOrder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastOrder"
							]
						}
					},
					"response": []
				},
				{
					"name": "When attempting to create breakfast order with no items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7dd9548-eef1-4a43-8288-f24057c24eab",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"breakfastItems\": []\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastOrder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastOrder"
							]
						}
					},
					"response": []
				},
				{
					"name": "When attempting to create breakfast order with empty item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7dd9548-eef1-4a43-8288-f24057c24eab",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"breakfastItems\": [\"bacon\", \"\"]\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastOrder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastOrder"
							]
						}
					},
					"response": []
				},
				{
					"name": "When attempting to create empty breakfast order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7dd9548-eef1-4a43-8288-f24057c24eab",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/BreakfastOrder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastOrder"
							]
						}
					},
					"response": []
				},
				{
					"name": "When creating breakfast order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d35b7fa-ff3c-4867-a935-d2de7e65ac5c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should have correct items\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"breakfastItems\")",
									"                        .that.is.an(\"array\").with.lengthOf(2)",
									"                        .and.is.deep.equal([ \"bacon\", \"eggs\" ]);",
									"});",
									"",
									"pm.test(\"response should have a creation date\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"dateCreated\").that.is.not.empty;",
									"});",
									"",
									"pm.test(\"response should have an id\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.not.empty;",
									"",
									"    // save id for next requests.",
									"    pm.environment.set(\"order_id\", jsonData.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"breakfastItems\": [\"bacon\", \"eggs\"]\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastOrder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastOrder"
							]
						}
					},
					"response": []
				},
				{
					"name": "When getting all breakfast orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a1af422-e525-45b6-8326-8a30f62fea1d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should be an array\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response should have a single item\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(1);",
									"});",
									"",
									"pm.test(\"first order should have correct items\", function () { ",
									"    var order = pm.response.json()[0];",
									"    pm.expect(order).to.have.property(\"breakfastItems\")",
									"                        .that.is.an(\"array\").with.lengthOf(2)",
									"                        .and.is.deep.equal([ \"bacon\", \"eggs\" ]);",
									"});",
									"",
									"pm.test(\"first order should have a creation date\", function () { ",
									"    var order = pm.response.json()[0];",
									"    pm.expect(order).to.have.property(\"dateCreated\").that.is.not.empty;",
									"});",
									"",
									"pm.test(\"first order should have an id\", function () { ",
									"    var order = pm.response.json()[0];",
									"    var expected = pm.environment.get(\"order_id\");",
									"    pm.expect(order).to.have.property(\"id\").that.is.equal(expected);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"breakfastItems\": [\"bacon\", \"eggs\"]\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastOrder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastOrder"
							]
						}
					},
					"response": []
				},
				{
					"name": "When getting expired breakfast orders (this includes a 60s wait)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "455adc11-4db2-4bee-896e-0ab3cabc9c28",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should be an array\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"response should have no items\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(0);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "25027cfc-9936-4281-8f86-8a6b4cbc51fd",
								"type": "text/javascript",
								"exec": [
									"// https://docs.mongodb.com/manual/core/index-ttl/#timing-of-the-delete-operation",
									"// \"The background task that removes expired documents runs every 60 seconds\"",
									"setTimeout(function(){}, 60100);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"breakfastItems\": [\"bacon\", \"eggs\"]\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastOrder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastOrder"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7b78ee5d-b7ac-4543-b577-e7b2ff7e0e92",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dee47bf5-ddaa-45d2-b31a-1e7fd15ca238",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Breakfast Reviews",
			"description": "Tests /api/breakfastreview endpoints.\nThis is meant to test a mongo repository setup for soft deletion.",
			"item": [
				{
					"name": "When attempting to create invalid breakfast review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c0f2a6f-07bd-4c15-90f9-76017f3a2b66",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"alex\",\n\t\"rating\": 11\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastReview",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastReview"
							]
						}
					},
					"response": []
				},
				{
					"name": "When attempting to create empty breakfast review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c0f2a6f-07bd-4c15-90f9-76017f3a2b66",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/BreakfastReview",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastReview"
							]
						}
					},
					"response": []
				},
				{
					"name": "When creating breakfast review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11f8acff-5f9b-4bbb-b0bb-28c72c225d7c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should have correct username\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"username\").that.is.equal(\"alex\");",
									"});",
									"",
									"pm.test(\"response should have correct rating\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"rating\").that.is.equal(10);",
									"});",
									"",
									"pm.test(\"response should have an id\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.not.empty;",
									"",
									"    // save id for next requests.",
									"    pm.environment.set(\"review_id\", jsonData.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"alex\",\n\t\"rating\": 10\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastReview",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastReview"
							]
						}
					},
					"response": []
				},
				{
					"name": "When getting breakfast review by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33964398-5f0a-4832-970a-9a265c9e3a33",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should have correct username\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"username\").that.is.equal(\"alex\");",
									"});",
									"",
									"pm.test(\"response should have correct rating\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"rating\").that.is.equal(10);",
									"});",
									"",
									"pm.test(\"response should have an id\", function () { ",
									"    var jsonData = pm.response.json();",
									"    var expected = pm.environment.get(\"review_id\");",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.equal(expected);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastReview/{{review_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastReview",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "When updating breakfast review rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8a1c9f6-b9db-468f-9dde-26c88f27e6de",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should have correct username\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"username\").that.is.equal(\"alex\");",
									"});",
									"",
									"pm.test(\"response should have correct rating\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"rating\").that.is.equal(1);",
									"});",
									"",
									"pm.test(\"response should have an id\", function () { ",
									"    var jsonData = pm.response.json();",
									"    var expected = pm.environment.get(\"review_id\");",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.equal(expected);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"rating\": 1\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastReview/{{review_id}}/rating",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastReview",
								"{{review_id}}",
								"rating"
							]
						}
					},
					"response": []
				},
				{
					"name": "When attempting to update non-existent breakfast review rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc5fe45e-3967-493c-a642-baab4aafe56b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"rating\": 1\n}"
						},
						"url": {
							"raw": "{{url}}/api/BreakfastReview/123456/rating",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastReview",
								"123456",
								"rating"
							]
						}
					},
					"response": []
				},
				{
					"name": "When deleting breakfast review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fab5de72-aa6a-4867-9ef8-c1670ca08912",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastReview/{{review_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastReview",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "When attempting to get deleted breakfast review by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32652026-fcd7-4ad7-969b-788d8cd421ef",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastReview/{{review_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastReview",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "When un-deleting breakfast review",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74b656d1-fa90-4073-9c35-654b15937bf3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastReview/{{review_id}}/un-delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastReview",
								"{{review_id}}",
								"un-delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "When getting un-deleted breakfast review by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7491b2fe-ce01-4982-8b3e-ff0ed03037e9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be json\", function () { ",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response should have correct username\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"username\").that.is.equal(\"alex\");",
									"});",
									"",
									"pm.test(\"response should have correct rating\", function () { ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"rating\").that.is.equal(1);",
									"});",
									"",
									"pm.test(\"response should have an id\", function () { ",
									"    var jsonData = pm.response.json();",
									"    var expected = pm.environment.get(\"review_id\");",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.equal(expected);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}/api/BreakfastReview/{{review_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"BreakfastReview",
								"{{review_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}